import OpenAI from 'openai'
import axios from 'axios'

const ZAKON_API_URL = 'https://court.searcher.api.zakononline.com.ua/v1/search'
const ZAKON_TOKEN = process.env.ZAKON_TOKEN

// Initialize OpenAI client conditionally
const getOpenAI = () => {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OpenAI API key not configured')
  }
  return new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  })
}

// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
export async function extractIntelligentSearchQuery(userText: string): Promise<string> {
  console.log('[Intelligent Search] üß† Extracting search query from:', userText)
  
  try {
    const openai = getOpenAI();
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø—Ä–∞–≤–∞. –ù–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É —Å–∏—Ç—É–∞—Ü—ñ—ó –∞–¥–≤–æ–∫–∞—Ç–∞ —Å—Ñ–æ—Ä–º—É–π —Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –±–∞–∑–∏ —Å—É–¥–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å.

–ü–†–ò–ö–õ–ê–î:
–í—Ö—ñ–¥: "–Ø –∞–¥–≤–æ–∫–∞—Ç –≤–ª–∞—Å–Ω–∏–∫–∞ –∂–∏—Ç–ª–∞. –°–∏—Ç—É–∞—Ü—ñ—è: –∫–æ–ª–∏—à–Ω—ñ–π –º–µ—à–∫–∞–Ω–µ—Ü—å –Ω–µ –ø—Ä–æ–∂–∏–≤–∞—î –¥–∞–≤–Ω–æ, —É –ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—ó —É—á–∞—Å—Ç—ñ –Ω–µ –±—Ä–∞–≤, –∞–ª–µ —Ö–æ—á–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è"
–í–∏—Ö—ñ–¥: "–ø—Ä–æ –≤–∏–∑–Ω–∞–Ω–Ω—è –æ—Å–æ–±–∏ —Ç–∞–∫–æ—é, —â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∞ –ø—Ä–∞–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç–ª–æ–≤–∏–º –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è–º" AND "–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—ó" AND "–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è"

–ü–†–ê–í–ò–õ–ê:
1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–æ—á–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø—Ä–∞–≤–∞
2. –ö–æ–º–±—ñ–Ω—É–π –∫–ª—é—á–æ–≤—ñ —Ñ—Ä–∞–∑–∏ —á–µ—Ä–µ–∑ AND –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
3. –£–Ω–∏–∫–∞–π –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤ —è–∫ "—Å—É–¥", "—Å–ø—Ä–∞–≤–∞", "—Ä—ñ—à–µ–Ω–Ω—è"
4. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø—Ä–∞–≤–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —Ç–∞ –æ–±—Å—Ç–∞–≤–∏–Ω–∞—Ö
5. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–∞–≤–∏—á–∫–∏ –¥–ª—è —Ç–æ—á–Ω–∏—Ö —Ñ—Ä–∞–∑
6. –ú–∞–∫—Å–∏–º—É–º 3-4 –∫–ª—é—á–æ–≤–∏—Ö –±–ª–æ–∫–∏ —á–µ—Ä–µ–∑ AND

–°—Ñ–æ—Ä–º—É–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç:`
        },
        { role: 'user', content: userText }
      ],
      max_tokens: 150,
      temperature: 0.3,
    })
    
    const searchQuery = completion.choices[0]?.message?.content?.trim() || ''
    console.log('[Intelligent Search] üéØ Generated search query:', searchQuery)
    
    return searchQuery
  } catch (error) {
    console.error('[Intelligent Search] ‚ùå OpenAI extraction error:', error)
    // Fallback to simple extraction
    return extractFallbackSearchTerms(userText)
  }
}

// Fallback extraction if OpenAI fails
function extractFallbackSearchTerms(userText: string): string {
  const legalPatterns = [
    { pattern: /(–≤–∏—Å–µ–ª–µ–Ω|–≤–∏—Å–µ–ª–∏–ª|–≤–∏—Å–µ–ª—è–≤)/i, term: '–≤–∏—Å–µ–ª–µ–Ω–Ω—è' },
    { pattern: /(–∑–≤—ñ–ª—å–Ω–µ–Ω|–∑–≤—ñ–ª—å–Ω–∏–ª|–∑–≤—ñ–ª—å–Ω—è–≤)/i, term: '–∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è' },
    { pattern: /(–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü)/i, term: '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—ó' },
    { pattern: /(—Ä–µ—î—Å—Ç—Ä|–ø—Ä–æ–ø–∏—Å–∫)/i, term: '—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' },
    { pattern: /(–≤—Ç—Ä–∞—Ç–∏.*–ø—Ä–∞–≤–æ|–≤—Ç—Ä–∞—Ç–∏–ª–∞.*–ø—Ä–∞–≤–æ)/i, term: '–≤—Ç—Ä–∞—Ç–∞ –ø—Ä–∞–≤–∞' },
    { pattern: /(–∂–∏—Ç–ª–æ|–ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è)/i, term: '–∂–∏—Ç–ª–æ–≤–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è' }
  ]
  
  const foundTerms: string[] = []
  for (const { pattern, term } of legalPatterns) {
    if (pattern.test(userText)) {
      foundTerms.push(`"${term}"`)
    }
  }
  
  return foundTerms.length > 0 ? foundTerms.join(' AND ') : '—Å—É–¥–æ–≤–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞'
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
async function generateMetadataSummary(metadata: any[], courtLevels: any): Promise<string> {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const courtStats = Object.entries(courtLevels).map(([level, count]) => `${level}: ${Array.isArray(count) ? count.length : count} —Å–ø—Ä–∞–≤`).join(', ')
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ–ª (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—É–¥–∞)
    const topCases = metadata.slice(0, 5).map(caseItem => ({
      title: caseItem.title,
      court: caseItem.courtLevel,
      date: caseItem.adjudication_date,
      resolution: caseItem.resolution
    }))
    
    const openai = getOpenAI();
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É —Å—É–¥–æ–≤–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏. –ù–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö —Å–ø—Ä–∞–≤ —Å—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ (2-3 —Ä–µ—á–µ–Ω–Ω—è) –¥–ª—è –∞–¥–≤–æ–∫–∞—Ç–∞.

–ü–†–ê–í–ò–õ–ê:
1. –í–∫–∞–∂–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Å–ø—Ä–∞–≤
2. –ó–≥–∞–¥–∞–π —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—É–¥–æ–≤–∏—Ö —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è—Ö
3. –í—ñ–¥–º—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó –≤ —Ä—ñ—à–µ–Ω–Ω—è—Ö
4. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º
5. –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ
6. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –≤–∏—Å–Ω–æ–≤–∫–∞—Ö –¥–ª—è –∞–¥–≤–æ–∫–∞—Ç–∞

–§–û–†–ú–ê–¢:
"–ó–Ω–∞–π–¥–µ–Ω–æ X —Å–ø—Ä–∞–≤ –ø–æ –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—É. –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è—Ö: [—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]. –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó: [–∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏]. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó."`
        },
        {
          role: 'user',
          content: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${courtStats}\n\n–¢–æ–ø-5 —Å–ø—Ä–∞–≤:\n${topCases.map((c, i) => 
            `${i+1}. ${c.title} (${c.court}, ${c.date}) - ${c.resolution}`
          ).join('\n')}`
        }
      ],
      max_tokens: 200,
      temperature: 0.3,
    })
    
    return completion.choices[0]?.message?.content?.trim() || '–ê–Ω–∞–ª—ñ–∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'
  } catch (error) {
    console.error('[Intelligent Search] ‚ùå Error generating metadata summary:', error)
    return `–ó–Ω–∞–π–¥–µ–Ω–æ ${metadata.length} —Å–ø—Ä–∞–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –≤–∏—Å–Ω–æ–≤–∫—ñ–≤.`
  }
}

// –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–≠—Ç–∞–ø 1)
export async function performQuickMetadataSearch(searchQuery: string): Promise<{
  metadata: any[],
  totalFound: number,
  courtLevels: any,
  summary: string
}> {
  console.log('[Intelligent Search] üîç Starting quick metadata search with query:', searchQuery)
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è–º
  const { allMetadata, resultsByLevel } = await getCaseMetadata(searchQuery)
  
  if (allMetadata.length === 0) {
    console.log('[Intelligent Search] ‚ùå No metadata found.')
    return { 
      metadata: [], 
      totalFound: 0, 
      courtLevels: {}, 
      summary: '–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Å–ø—Ä–∞–≤–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.'
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–µ–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—É–¥–∞
  allMetadata.sort((a, b) => a.courtPriority - b.courtPriority)
  const totalFound = allMetadata.length
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const summary = await generateMetadataSummary(allMetadata, resultsByLevel)
  
  return {
    metadata: allMetadata,
    totalFound,
    courtLevels: resultsByLevel,
    summary
  }
}

// –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Zakon Online: 1. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ -> 2. –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
export async function performIntelligentZakonSearch(searchQuery: string): Promise<{
  metadata: any[],
  fullTexts: any[],
  totalFound: number,
  courtLevels: any
}> {
  console.log('[Intelligent Search] üîç Starting 2-phase search with query:', searchQuery)
  
  // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è–º
  const { allMetadata, resultsByLevel } = await getCaseMetadata(searchQuery)
  
  if (allMetadata.length === 0) {
    console.log('[Intelligent Search] ‚ùå No metadata found. Aborting.')
    return { metadata: [], fullTexts: [], totalFound: 0, courtLevels: {} }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–µ–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—É–¥–∞
  allMetadata.sort((a, b) => a.courtPriority - b.courtPriority)
  const totalFound = allMetadata.length
  
  // –≠—Ç–∞–ø 2: –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-15 –¥–µ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
  const casesToFetch = allMetadata.slice(0, 15)
  console.log(`[Intelligent Search] üìÑ Fetching full texts for ${casesToFetch.length} top cases...`)
  const fullTextResults = await getFullTextsByIds(casesToFetch)
  
  console.log(`[Intelligent Search] ‚úÖ 2-phase search complete. Found ${totalFound} cases, fetched ${fullTextResults.length} full texts.`)
  
  return {
    metadata: allMetadata,
    fullTexts: fullTextResults,
    totalFound,
    courtLevels: resultsByLevel
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
function generateSearchStrategies(originalQuery: string): string[] {
  const strategies: string[] = []
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  strategies.push(originalQuery)
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —á–µ—Ä–µ–∑ AND
  const parts = originalQuery.split(' AND ')
  if (parts.length >= 2) {
    strategies.push(`${parts[0]} AND ${parts[1]}`)
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –¢–æ–ª—å–∫–æ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
  const quotedParts = parts.filter(part => part.includes('"'))
  if (quotedParts.length > 0) {
    const longestPart = quotedParts.reduce((a, b) => a.length > b.length ? a : b)
    strategies.push(longestPart)
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ AND
  const keywords = originalQuery
    .replace(/"/g, '')
    .split(/\s+AND\s+/)
    .map(part => part.trim())
    .filter(Boolean)
  
  if (keywords.length > 0) {
    strategies.push(`"${keywords[0]}"`) // –ü–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∫–∞–∫ fallback
  const legalTerms = ['–≤–∏—Å–µ–ª–µ–Ω–Ω—è', '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—è', '—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', '–∂–∏—Ç–ª–æ–≤–µ –ø—Ä–∞–≤–æ']
  for (const term of legalTerms) {
    if (originalQuery.toLowerCase().includes(term.toLowerCase())) {
      strategies.push(term)
      break
    }
  }
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  return Array.from(new Set(strategies)).filter(Boolean)
}

// –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è–º
async function getCaseMetadata(searchQuery: string) {
  const searchStrategies = generateSearchStrategies(searchQuery)
  
  const courtLevels = [
    { instance: '4', name: '–í–µ—Ä—Ö–æ–≤–Ω–∏–π —Å—É–¥ / –ö–∞—Å–∞—Ü—ñ–π–Ω—ñ —Å—É–¥–∏', priority: 1, limit: 30 },
    { instance: '2', name: '–ê–ø–µ–ª—è—Ü—ñ–π–Ω—ñ —Å—É–¥–∏', priority: 2, limit: 25 },
    { instance: '1', name: '–°—É–¥–∏ –ø–µ—Ä—à–æ—ó —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—ó', priority: 3, limit: 25 }
  ]
  
  let allMetadata: any[] = []
  let resultsByLevel: any = {}

  for (const strategy of searchStrategies) {
    console.log(`[Intelligent Search] üéØ Trying strategy: "${strategy}"`)
    
    for (const court of courtLevels) {
      const levelResults = await makeApiRequest({
        search: strategy,
        instance: court.instance,
        limit: String(court.limit),
        results: 'metadata' // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      })
      
      if (levelResults.length > 0) {
        const enrichedResults = levelResults.map((item: any) => ({
          ...item,
          courtLevel: court.name,
          courtPriority: court.priority
        }))
        
        if (!resultsByLevel[court.name]) {
          resultsByLevel[court.name] = []
        }
        resultsByLevel[court.name].push(...enrichedResults)
        allMetadata.push(...enrichedResults)
      }
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    if (allMetadata.length > 0) {
      console.log(`[Intelligent Search] ‚úÖ Strategy "${strategy}" successful. Found ${allMetadata.length} total metadata records.`)
      break
    }
  }
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ doc_id
  const uniqueMetadata = Array.from(new Map(allMetadata.map(item => [item.doc_id, item])).values())
  
  return { allMetadata: uniqueMetadata, resultsByLevel }
}

// –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ ID —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
export async function getFullTextsByIds(cases: any[]): Promise<any[]> {
  const fullTexts = []
  for (const caseMeta of cases) {
    let fullText = null
    
    // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–∏—Å–∫ –ø–æ doc_id (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
    if (caseMeta.doc_id) {
      console.log(`[Intelligent Search]   - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è doc_id: ${caseMeta.doc_id}`)
      const results = await makeApiRequest({
        search: `doc_id:${caseMeta.doc_id}`,
        limit: '1',
        results: 'standart'
      })
      
      if (results.length > 0 && results[0].text) {
        fullText = results[0].text
        console.log(`[Intelligent Search]   - ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è doc_id: ${caseMeta.doc_id}`)
      }
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ 2: Fallback –Ω–∞ cause_num, –µ—Å–ª–∏ doc_id –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    if (!fullText && caseMeta.cause_num) {
      console.log(`[Intelligent Search]   - Fallback: –ø–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏: ${caseMeta.cause_num}`)
      const results = await makeApiRequest({
        search: `"${caseMeta.cause_num}"`,
        limit: '1',
        results: 'standart'
      })
      
      if (results.length > 0 && results[0].text) {
        fullText = results[0].text
        console.log(`[Intelligent Search]   - ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏: ${caseMeta.cause_num}`)
      }
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–Ω–∏–ø–ø–µ—Ç –∫–∞–∫ fallback
    if (!fullText && caseMeta.snippet) {
      console.log(`[Intelligent Search]   - Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–Ω–∏–ø–ø–µ—Ç–∞ –¥–ª—è doc_id: ${caseMeta.doc_id}`)
      fullText = caseMeta.snippet
        .replace(/<[^>]*>/g, '') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        .trim()
    }
    
    if (fullText) {
      fullTexts.push({
        ...caseMeta,
        fullText: fullText
      })
    } else {
      console.log(`[Intelligent Search]   - ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è doc_id: ${caseMeta.doc_id}`)
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è API
    await new Promise(resolve => setTimeout(resolve, 200))
  }
  
  console.log(`[Intelligent Search]   - –ó–∞–≥–∞–ª–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${fullTexts.length} –ø–æ–≤–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤ –∑ ${cases.length} —Å–ø—Ä–æ–±`)
  return fullTexts
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
async function makeApiRequest(params: Record<string, string>): Promise<any[]> {
  const payload = {
    mode: 'sph04',
    target: 'text',
    namespace: 'sudreyestr',
    page: '1',
    instance: params.instance || '3',
    judgement: '3',
    ...params
  }
  
  try {
    console.log(`[Intelligent Search]   - API –∑–∞–ø–∏—Ç: ${params.search}`)
    const response = await axios.get(ZAKON_API_URL, {
      headers: { 'X-App-Token': ZAKON_TOKEN },
      params: payload,
      timeout: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    })
    
    const data = Array.isArray(response.data) ? response.data : []
    console.log(`[Intelligent Search]   - API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${data.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`)
    
    return data
  } catch (err: any) {
    console.error(`[Intelligent Search] ‚ùå –ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É –¥–ª—è "${params.search}":`, err.message)
    return []
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
export function formatZakonResultsForAI(results: {
  metadata: any[],
  fullTexts: any[],
  totalFound: number,
  courtLevels: any
}): string {
  if (results.totalFound === 0) {
    return '\n**–ü–û–®–£–ö –£ –ë–ê–ó–Ü –ó–ê–ö–û–ù –û–ù–õ–ê–ô–ù**: –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.'
  }
  
  const statsText = `**–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–®–£–ö–£ –í –ë–ê–ó–Ü –ó–ê–ö–û–ù –û–ù–õ–ê–ô–ù**: –ó–Ω–∞–π–¥–µ–Ω–æ ${results.totalFound} —Å–ø—Ä–∞–≤, –¥–ª—è –≥–ª–∏–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${results.fullTexts.length} –ø–æ–≤–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤.\n`
  
  const courtStats = Object.keys(results.courtLevels)
    .map(level => `‚Ä¢ **${level}**: ${results.courtLevels[level].length} —Å–ø—Ä–∞–≤`)
    .join(' | ')
  
  const levelsSummary = courtStats ? `**–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è—Ö**: ${courtStats}\n` : ''

  const detailedAnalysis = results.fullTexts.length > 0 ? 
    '## –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ò–• –°–ü–†–ê–í:\n' +
    results.fullTexts.map((item, index) => {
      const textPreview = item.fullText ? 
        item.fullText.substring(0, 800).replace(/\s+/g, ' ').trim() + '...' :
        '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
      const keyPoints = extractKeyLegalPoints(textPreview)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–∞
      const caseResult = determineCaseResult(item.resolution, textPreview)
      
      return `### –°–ø—Ä–∞–≤–∞ ${index + 1}: ${item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∏'}\n` +
             `**–ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏:** ${item.cause_num || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
             `**–°—É–¥:** ${item.courtLevel} ‚Ä¢ **–î–∞—Ç–∞:** ${item.adjudication_date?.split('T')[0] || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
             `**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${caseResult}\n` +
             `**–†—ñ—à–µ–Ω–Ω—è:** ${item.resolution || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
             `**–ö–ª—é—á–æ–≤—ñ –ø—Ä–∞–≤–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏:**\n${keyPoints}\n` +
             `**–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:** ${textPreview}\n` +
             `**–ü–æ—Å–∏–ª–∞–Ω–Ω—è:** [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è](${item.url || '#'})\n`
    }).join('\n') : ''
  
  return statsText + levelsSummary + '\n' + detailedAnalysis
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
function extractKeyLegalPoints(text: string): string {
  const keyPhrases = [
    '–≤–∏–∑–Ω–∞–Ω–Ω—è –æ—Å–æ–±–∏ —Ç–∞–∫–æ—é, —â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∞ –ø—Ä–∞–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è',
    '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü—ñ—è',
    '—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º—ñ—Å—Ü—è –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è',
    '–ø—Ä–∞–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∂–∏—Ç–ª–æ–≤–∏–º –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è–º',
    '–≤—ñ–¥–º–æ–≤–∞',
    '–∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –ø–æ–∑–æ–≤—É',
    '—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è',
    '–≤–∏–∑–Ω–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–∏–º',
    '–∑–Ω—è—Ç—Ç—è –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
    '–≤–∏—Å–µ–ª–µ–Ω–Ω—è',
    '—Ç—Ä–∏–≤–∞–ª–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å',
    '—Ñ–∞–∫—Ç–∏—á–Ω–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è'
  ]
  
  const foundPoints = keyPhrases
    .filter(phrase => text.toLowerCase().includes(phrase.toLowerCase()))
    .map(phrase => `‚Ä¢ ${phrase}`)
    .slice(0, 4) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 4 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  
  return foundPoints.length > 0 ? foundPoints.join('\n') : '‚Ä¢ –ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ –Ω–µ –≤–∏—è–≤–ª–µ–Ω—ñ'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ª–∞
function determineCaseResult(resolution: string, text: string): string {
  const lowerText = text.toLowerCase()
  const lowerResolution = resolution?.toLowerCase() || ''
  
  if (lowerText.includes('–∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è') || lowerText.includes('–∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ') || lowerText.includes('–≤–∏–∑–Ω–∞—Ç–∏')) {
    return '‚úÖ –ó–∞–¥–æ–≤–æ–ª–µ–Ω–æ –ø–æ–∑–æ–≤'
  } else if (lowerText.includes('–≤—ñ–¥–º–æ–≤–∞') || lowerText.includes('–≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ') || lowerText.includes('–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏')) {
    return '‚ùå –í—ñ–¥–º–æ–≤–ª–µ–Ω–æ –≤ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—ñ –ø–æ–∑–æ–≤—É'
  } else if (lowerText.includes('—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è') || lowerText.includes('—Å–∫–∞—Å–æ–≤–∞–Ω–æ')) {
    return 'üîÑ –°–∫–∞—Å–æ–≤–∞–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ä—ñ—à–µ–Ω–Ω—è'
  } else if (lowerText.includes('—á–∞—Å—Ç–∫–æ–≤–æ')) {
    return '‚öñÔ∏è –ó–∞–¥–æ–≤–æ–ª–µ–Ω–æ —á–∞—Å—Ç–∫–æ–≤–æ'
  } else {
    return '‚ùì –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'
  }
} 