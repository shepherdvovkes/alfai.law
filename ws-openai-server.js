const WebSocket = require('ws')
const axios = require('axios')
require('dotenv').config({ path: '.env.local' })

const isDevelopment = process.env.NODE_ENV === 'development'
const hasValidApiKey = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.length > 0

console.log(`[WebSocket Server] üöÄ Starting in ${isDevelopment ? 'development' : 'production'} mode`)
console.log(`[WebSocket Server] üîë OpenAI API Key configured: ${hasValidApiKey ? 'Yes' : 'No'}`)

const wss = new WebSocket.Server({ port: 3001 })

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–ª –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
const sessionCases = new Map()

wss.on('connection', (ws) => {
  console.log('[WebSocket Server] ‚úÖ New client connected')
  
  ws.on('message', async (message) => {
    try {
      const data = JSON.parse(message)
      console.log('[WebSocket Server] üì® Received message type:', data.type, 'messageId:', data.messageId)
      
      if (data.type === 'message') {
        await handleChatMessage(ws, data)
      } else if (data.type === 'analyze') {
        console.log('[WebSocket Server] üîç Starting analysis for messageId:', data.messageId)
        await handleAnalyzeRequest(ws, data)
      } else if (data.type === 'getCases') {
        await handleGetCases(ws, data)
      } else {
        console.log('[WebSocket Server] ‚ùì Unknown message type:', data.type)
      }
      
    } catch (error) {
      console.error('[WebSocket Server] ‚ùå Error processing message:', error)
      ws.send(JSON.stringify({
        type: 'error',
        error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
      }))
    }
  })
  
  ws.on('close', () => {
    console.log('[WebSocket Server] üëã Client disconnected')
  })
})

async function handleChatMessage(ws, data) {
  const { message, messageId } = data

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å—Ä–∞–∑—É
    const algorithmLogs = [
      '–ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...',
      '–í–∏—Ç—è–≥—É—é –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ OpenAI API...',
      '–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ Zakon Online API...',
      '–û—Ç—Ä–∏–º—É—é –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–ø—Ä–∞–≤...',
      '–ê–Ω–∞–ª—ñ–∑—É—é —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—É–¥–æ–≤–∏—Ö —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è—Ö...',
      '–ì–µ–Ω–µ—Ä—É—é —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ ChatGPT...',
      '–§–æ—Ä–º—É—é —Ñ—ñ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...'
    ]

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    for (let i = 0; i < algorithmLogs.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 600)) // 600ms –º–µ–∂–¥—É –ª–æ–≥–∞–º–∏
      ws.send(JSON.stringify({
        type: 'algorithmLog',
        messageId: messageId,
        log: algorithmLogs[i]
      }))
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ª–æ–≥–æ–≤
    await new Promise(resolve => setTimeout(resolve, 500))

    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API route –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const response = await callIntelligentAPIRoute(message)

    if (response.success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      if (response.zakonResults) {
        console.log(`[WebSocket Server] üíæ Response contains zakonResults for messageId: ${messageId}`)
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        if (response.zakonResults && response.zakonResults.metadata) {
          console.log(`[WebSocket Server] üíæ Saving ${response.zakonResults.metadata.length} metadata records for messageId: ${messageId}`)
          sessionCases.set(messageId, response.zakonResults.metadata)
          console.log(`[WebSocket Server] üíæ Session now contains ${sessionCases.size} messageIds`)
        } else {
          console.log(`[WebSocket Server] ‚ö†Ô∏è No metadata found in response for messageId: ${messageId}`)
        }
      } else {
        console.log(`[WebSocket Server] ‚ö†Ô∏è No zakonResults in response for messageId: ${messageId}`)
      }

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
      await simulateStreaming(ws, response.message, messageId)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      ws.send(JSON.stringify({
        type: 'complete',
        messageId: messageId,
        zakonResults: response.zakonResults
      }))
    } else {
      ws.send(JSON.stringify({
        type: 'error',
        messageId: messageId,
        error: response.error || '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É'
      }))
    }

  } catch (error) {
    console.error('[WebSocket Server] ‚ùå Error in chat message:', error)
    ws.send(JSON.stringify({
      type: 'error',
      messageId: messageId,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ AI —Å–µ—Ä–≤—ñ—Å–æ–º'
    }))
  }
}

async function handleAnalyzeRequest(ws, data) {
  const { messageId } = data
  
  try {
    console.log('[WebSocket Server] üîç Starting analysis for messageId:', messageId)
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    const metadata = sessionCases.get(messageId) || []
    console.log('[WebSocket Server] üìä Found metadata in session:', metadata.length, 'cases')
    
    if (metadata.length === 0) {
      console.log('[WebSocket Server] ‚ùå No metadata found for messageId:', messageId)
      ws.send(JSON.stringify({
        type: 'analyzeError',
        messageId: messageId,
        error: '–ù–µ–º–∞—î —Å–ø—Ä–∞–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É'
      }))
      return
    }
    
    console.log(`[WebSocket Server] üîç Starting full analysis of ${metadata.length} cases`)
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-15 –¥–µ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    const casesToFetch = metadata.slice(0, 15).map(caseItem => ({
      doc_id: caseItem.doc_id || caseItem.id || caseItem.case_number
    }))
    
    console.log(`[WebSocket Server] üìÑ Fetching full texts for cases:`, casesToFetch.map(c => c.doc_id))
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    const fullTextsResponse = await axios.post('http://localhost:3000/api/ai/get-full-texts', {
      cases: casesToFetch
    })
    
    if (!fullTextsResponse.data.success) {
      ws.send(JSON.stringify({
        type: 'analyzeError',
        messageId: messageId,
        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤'
      }))
      return
    }
    
    const fullTexts = fullTextsResponse.data.fullTexts
    console.log(`[WebSocket Server] üìÑ Loaded ${fullTexts.length} full texts`)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const texts = fullTexts.map(caseItem => caseItem.fullText || caseItem.snippet || '')
    
    // –í—ã–∑—ã–≤–∞–µ–º API –∞–Ω–∞–ª–∏–∑–∞
    const response = await axios.post('http://localhost:3000/api/ai/analyze-texts', {
      texts: texts
    })
    
    if (response.data.success) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
      ws.send(JSON.stringify({
        type: 'analyzeComplete',
        messageId: messageId,
        analysis: response.data.analysis,
        stats: response.data.stats
      }))
      console.log(`[WebSocket Server] ‚úÖ Analysis completed successfully`)
    } else {
      ws.send(JSON.stringify({
        type: 'analyzeError',
        messageId: messageId,
        error: response.data.error || '–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É'
      }))
    }
    
  } catch (error) {
    console.error('[WebSocket Server] ‚ùå Error in analyze request:', error)
    ws.send(JSON.stringify({
      type: 'analyzeError',
      messageId: messageId,
      error: '–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–∫—Å—Ç—ñ–≤'
    }))
  }
}

async function handleGetCases(ws, data) {
  const { messageId } = data
  
  try {
    const cases = sessionCases.get(messageId) || []
    
    ws.send(JSON.stringify({
      type: 'casesData',
      messageId: messageId,
      cases: cases
    }))
    
  } catch (error) {
    console.error('[WebSocket Server] ‚ùå Error getting cases:', error)
    ws.send(JSON.stringify({
      type: 'error',
      messageId: messageId,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø—Ä–∞–≤'
    }))
  }
}

async function callIntelligentAPIRoute(userMessage) {
  try {
    const response = await axios.post('http://localhost:3000/api/ai/chat', {
      messages: [
        {
          role: 'user',
          content: userMessage
        }
      ],
      model: 'gpt-4o-mini'
    })
    
    return response.data
  } catch (error) {
    console.error('[WebSocket Server] ‚ùå Error calling API route:', error)
    throw error
  }
}

async function simulateStreaming(ws, fullResponse, messageId) {
  const words = fullResponse.split(' ')
  const chunkSize = 3 // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 3 —Å–ª–æ–≤–∞
  
  for (let i = 0; i < words.length; i += chunkSize) {
    const chunk = words.slice(i, i + chunkSize).join(' ')
    
    ws.send(JSON.stringify({
      type: 'message',
      messageId: messageId,
      content: chunk + ' '
    }))
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    await new Promise(resolve => setTimeout(resolve, 50))
  }
}

console.log('[WebSocket Server] üéØ Server running on ws://localhost:3001') 