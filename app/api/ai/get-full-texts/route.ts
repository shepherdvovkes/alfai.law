import { NextRequest, NextResponse } from 'next/server'
import { getFullTextsByIds } from '@/lib/intelligent-search'

export async function POST(request: NextRequest) {
  try {
    const { cases } = await request.json()

    if (!cases || !Array.isArray(cases) || cases.length === 0) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –º–∞—Å–∏–≤ —Å–ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤' },
        { status: 400 }
      )
    }

    console.log(`[Get Full Texts] üìÑ Loading full texts for ${cases.length} cases`)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    const fullTexts = await getFullTextsByIds(cases)

    console.log(`[Get Full Texts] ‚úÖ Successfully loaded ${fullTexts.length} full texts`)

    return NextResponse.json({
      success: true,
      fullTexts,
      stats: {
        requested: cases.length,
        loaded: fullTexts.length,
        successRate: Math.round((fullTexts.length / cases.length) * 100)
      }
    })

  } catch (error) {
    console.error('[Get Full Texts] ‚ùå Error loading full texts:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–≤–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤' },
      { status: 500 }
    )
  }
} 