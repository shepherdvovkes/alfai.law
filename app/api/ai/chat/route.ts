import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { 
  extractIntelligentSearchQuery, 
  performQuickMetadataSearch,
  performIntelligentZakonSearch, 
  formatZakonResultsForAI 
} from '@/lib/intelligent-search'

// Initialize OpenAI client conditionally
const getOpenAI = () => {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OpenAI API key not configured')
  }
  return new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  })
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { messages, model = 'gpt-4o-mini', caseCreation = false } = body;

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json({ error: 'Messages array is required' }, { status: 400 });
    }

    const userMessage = messages[messages.length - 1].content;
    let intelligentSearchQuery = '';
    let zakonResults: any = null;
    let zakonText = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
    const searchKeywords = [
      '–ø—Ä–∞–∫—Ç–∏–∫–∞', '—Å–ø—Ä–∞–≤–∏', '—Ä—ñ—à–µ–Ω–Ω—è', '—Å—É–¥–æ–≤—ñ', '–∑–∞–∫–æ–Ω –æ–Ω–ª–∞–π–Ω', 
      '–≤–∏—Å–µ–ª–µ–Ω–Ω—è', '–¥–æ–≥–æ–≤—ñ—Ä', '—Ç—Ä—É–¥–æ–≤—ñ —Å–ø–æ—Ä–∏', '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü', '—Ä–µ—î—Å—Ç—Ä–∞—Ü',
      '–∑–≤—ñ–ª—å–Ω–∏–ª–∏', '–∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è', '–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫', '–≤—ñ–¥–ø—É—Å—Ç–∫–∞', '–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ',
      '–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è', '–∞–ª—ñ–º–µ–Ω—Ç–∏', '–º–æ—Ä–∞–ª—å–Ω–∞ —à–∫–æ–¥–∞', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—è',
      '—Å–ø–∞–¥—â–∏–Ω–∞', '–º–∞–π–Ω–æ', '–ø–æ–∑–æ–≤', '—Å—É–¥', '–∞–¥–≤–æ–∫–∞—Ç', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é'
    ];
    const shouldSearchZakon = searchKeywords.some(keyword => userMessage.toLowerCase().includes(keyword));

    if (shouldSearchZakon) {
      console.log('[AI Assistant] üß† Activating intelligent search module for:', userMessage);
      
      // –≠—Ç–∞–ø 1: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ OpenAI
      intelligentSearchQuery = await extractIntelligentSearchQuery(userMessage);
      
      if (intelligentSearchQuery && intelligentSearchQuery !== '—Å—É–¥–æ–≤–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞') {
        console.log('[AI Assistant] üéØ Using intelligent search query:', intelligentSearchQuery);
        
        // –≠—Ç–∞–ø 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const quickResults = await performQuickMetadataSearch(intelligentSearchQuery);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const courtStats = Object.entries(quickResults.courtLevels)
          .map(([level, count]) => `${level}: ${Array.isArray(count) ? count.length : count} —Å–ø—Ä–∞–≤`)
          .join(', ');
          
        zakonText = `–†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–®–£–ö–£ –í –ë–ê–ó–Ü –ó–ê–ö–û–ù –û–ù–õ–ê–ô–ù:
–ó–Ω–∞–π–¥–µ–Ω–æ: ${quickResults.totalFound} —Å–ø—Ä–∞–≤
–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è—Ö: ${courtStats}

–ö–†–ê–¢–ö–ï –†–ï–ó–Æ–ú–ï:
${quickResults.summary}

–î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó:
–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –∑ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" –ø—ñ—Å–ª—è —Ü—ñ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        zakonResults = {
          metadata: quickResults.metadata,
          fullTexts: [],
          totalFound: quickResults.totalFound,
          courtLevels: quickResults.courtLevels
        };
        
        console.log('[AI Assistant] ‚úÖ Quick metadata search completed:', {
          query: intelligentSearchQuery,
          totalFound: quickResults.totalFound,
          summary: quickResults.summary.substring(0, 100) + '...'
        });
      } else {
        console.log('[AI Assistant] ‚ö†Ô∏è Fallback to basic search or no search needed');
        zakonText = '\n\n–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –±–∞–∑–∏ —Å—É–¥–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å.';
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º system prompt —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    let systemPrompt =
      '–¢–∏ ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–¥–∞—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å—É–¥–æ–≤–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –¥–ª—è –∞–¥–≤–æ–∫–∞—Ç—ñ–≤.\n\n' +
      '–ü–†–ê–í–ò–õ–ê –í–Ü–î–ü–û–í–Ü–î–Ü:\n' +
      '1. **–ü–û–ß–ù–ò –°–í–û–Æ –í–Ü–î–ü–û–í–Ü–î–¨ –¢–û–ß–ù–û –ó –ë–õ–û–ö–£ –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ü–û–®–£–ö–£**, —è–∫–∏–π –Ω–∞–¥–∞–Ω–æ –Ω–∏–∂—á–µ. –ù–µ –∑–º—ñ–Ω—é–π –π–æ–≥–æ.\n' +
      '2. **–î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–û–ñ–ù–û–á –°–ü–†–ê–í–ò**: –î–ª—è –∫–æ–∂–Ω–æ—ó —Å–ø—Ä–∞–≤–∏ –Ω–∞–¥–∞–π:\n' +
      '   - –ù–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ —Ç–∞ –¥–∞—Ç—É —Ä—ñ—à–µ–Ω–Ω—è\n' +
      '   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ/–≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ/—Å–∫–∞—Å–æ–≤–∞–Ω–æ)\n' +
      '   - –ö–ª—é—á–æ–≤—ñ –ø—Ä–∞–≤–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó —Å—É–¥—É\n' +
      '   - –§–∞–∫—Ç–æ—Ä–∏, —è–∫—ñ –≤–ø–ª–∏–Ω—É–ª–∏ –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—è\n' +
      '   - –ê—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—ñ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏/–Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏\n' +
      '   - –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ –¥–ª—è –∞–¥–≤–æ–∫–∞—Ç–∞\n' +
      '3. **–°–¢–†–ê–¢–ï–ì–Ü–ß–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á**: –ù–∞–¥–∞–π:\n' +
      '   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó –¥–ª—è –∞–¥–≤–æ–∫–∞—Ç–∞ (–ø–æ–∫—Ä–æ–∫–æ–≤–æ)\n' +
      '   - –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑–±–∏—Ä–∞—Ç–∏ (—Å–ø–∏—Å–æ–∫)\n' +
      '   - –Ø–∫—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ (–∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏)\n' +
      '   - –Ø–∫—ñ —Ä–∏–∑–∏–∫–∏ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —Ç–∞ —è–∫ —ó—Ö –º—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏\n' +
      '4. **–ü–û–î–Ü–õ –ù–ê –ö–ê–¢–ï–ì–û–†–Ü–á**: –†–æ–∑–¥—ñ–ª–∏ —Å–ø—Ä–∞–≤–∏ –Ω–∞:\n' +
      '   - –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–∏ (–Ω–∞ –∫–æ—Ä–∏—Å—Ç—å –≤–∞—à–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞)\n' +
      '   - –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–∏ (–ø—Ä–æ—Ç–∏ –≤–∞—à–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞)\n' +
      '   - –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ/—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ñ\n' +
      '5. **–ö–û–ù–ö–†–ï–¢–ù–Ü –í–ò–°–ù–û–í–ö–ò**: –ó–∞–º—ñ—Å—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏.\n' +
      '6. **–°–¢–†–£–ö–¢–£–†–ê –í–Ü–î–ü–û–í–Ü–î–Ü**: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —á—ñ—Ç–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞ –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.\n' +
      '7. –ù–µ –¥–æ–¥–∞–≤–∞–π –∑–∞–π–≤–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º.\n' +
      '8. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ.\n\n' +
      '--- –ù–ê–î–ê–ù–ò–ô –ë–õ–û–ö –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ü–û–®–£–ö–£ ---\n' +
      zakonText +
      '\n--- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ü–û–®–£–ö–£ ---\n\n' +
      (caseCreation ? '–Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ—è—Å–Ω–∏–π, –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è.' : '');

    console.log('[AI Assistant] üìù System prompt prepared with Zakon results');

    const systemMessage = { role: 'system' as const, content: systemPrompt };
    const conversationMessages = [systemMessage, ...messages];

    const openai = getOpenAI();
    const completion = await openai.chat.completions.create({
      model,
      messages: conversationMessages,
      max_tokens: parseInt(process.env.OPENAI_MAX_TOKENS || '4000'),
      temperature: parseFloat(process.env.OPENAI_TEMPERATURE || '0.7'),
    });

    const response = completion.choices[0]?.message?.content;

    console.log('[AI Assistant] ü§ñ OpenAI response generated');

    if (!response) {
      return NextResponse.json({ error: 'No response from OpenAI' }, { status: 500 });
    }

    return NextResponse.json({
      success: true,
      message: response,
      usage: completion.usage,
      intelligentSearchQuery,
      zakonResults: zakonResults ? {
        totalFound: zakonResults.totalFound,
        metadata: zakonResults.metadata, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadataCount: zakonResults.metadata.length,
        fullTextsAnalyzed: zakonResults.fullTexts.length,
        courtLevels: zakonResults.courtLevels
      } : null,
    });

  } catch (error: any) {
    console.error('OpenAI API error:', error);
    if (error instanceof OpenAI.APIError) {
      return NextResponse.json(
        { error: `OpenAI API error: ${error.message}` },
        { status: error.status || 500 }
      );
    }
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 