import { NextRequest, NextResponse } from 'next/server'
import { getFullTextsByIds } from '@/lib/intelligent-search'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    
    if (!id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
        { status: 400 }
      )
    }

    console.log(`[Document API] üìÑ Loading document with ID: ${id}`)

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å doc_id –¥–ª—è –ø–æ–∏—Å–∫–∞
    const caseToFetch = [{ doc_id: id }]
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ó–∞–∫–æ–Ω.–û–Ω–ª–∞–π–Ω
    const fullTexts = await getFullTextsByIds(caseToFetch)

    if (fullTexts.length === 0) {
      return NextResponse.json(
        { error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –ó–∞–∫–æ–Ω.–û–Ω–ª–∞–π–Ω' },
        { status: 404 }
      )
    }

    const document = fullTexts[0]
    
    console.log(`[Document API] ‚úÖ Successfully loaded document: ${document.doc_id}`)

    return NextResponse.json({
      success: true,
      document: {
        id: document.doc_id,
        name: document.name || `–î–æ–∫—É–º–µ–Ω—Ç ${document.doc_id}`,
        type: document.type || '–î–æ–∫—É–º–µ–Ω—Ç',
        category: document.courtLevel || '–°—É–¥–æ–≤–∞ —Å–ø—Ä–∞–≤–∞',
        client: document.parties || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
        status: 'active',
        size: `${Math.round((document.fullText?.length || 0) / 1024)} KB`,
        createdAt: new Date(document.date || Date.now()),
        lastModified: new Date(document.date || Date.now()),
        tags: document.tags || [],
        isFavorite: false,
        description: document.snippet || '–î–æ–∫—É–º–µ–Ω—Ç –∑ –±–∞–∑–∏ –ó–∞–∫–æ–Ω.–û–Ω–ª–∞–π–Ω',
        source: 'downloaded',
        content: document.fullText || '–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
        url: `/documents/${document.doc_id}`,
        metadata: {
          doc_id: document.doc_id,
          cause_num: document.cause_num,
          court: document.court,
          date: document.date,
          parties: document.parties,
          resolution: document.resolution
        }
      }
    })

  } catch (error) {
    console.error('[Document API] ‚ùå Error loading document:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
      { status: 500 }
    )
  }
} 